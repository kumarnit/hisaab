

Beautify, unpack or deobfuscate JavaScript and HTML, make JSON/JSONP readable, etc.

All of the source code is completely free and open, available on the github under MIT licence,
and we have a command-line version, python library and a node package as well.



HTML <style>, <script> formatting:
	End script and style with newline?
Detect packers and obfuscators?
Keep array indentation?
Break lines on chained methods?
Space before conditional: "if(x)" / "if (x)"
Unescape printable chars encoded as \xNN or \uNNNN?
Use JSLint-happy formatting tweaks?
Use a simple textarea for code input?
262

filter: progid: DXImageTransform.Microsoft.gradient(startColorstr = '#fff5f5f5', endColorstr = '#ffe8e8e8', GradientType = 0);

263

background - repeat: repeat - x

264

}.panel - primary > .panel - heading {

265

    background - image: -webkit - linear - gradient(top, #337ab7 0,# 2e6 da4 100 % );

266

    background - image: -o - linear - gradient(top, #337ab7 0,# 2e6 da4 100 % );

267

    background - image: -webkit - gradient(linear, left top, left bottom, from(#337ab7),to(# 2e6 da4));

268

    background - image: linear - gradient(to bottom, #337ab7 0,# 2e6 da4 100 % );

269

    filter: progid: DXImageTransform.Microsoft.gradient(startColorstr = '#ff337ab7', endColorstr = '#ff2e6da4', GradientType = 0);

270

    background - repeat: repeat - x

271

}.panel - success > .panel - heading {

272

    background - image: -webkit - linear - gradient(top, #dff0d8 0, #d0e9c6 100 % );

273

    background - image: -o - linear - gradient(top, #dff0d8 0, #d0e9c6 100 % );

274

    background - image: -webkit - gradient(linear, left top, left bottom, from(#dff0d8), to(#d0e9c6));

275

    background - image: linear - gradient(to bottom, #dff0d8 0, #d0e9c6 100 % );

276

    filter: progid: DXImageTransform.Microsoft.gradient(startColorstr = '#ffdff0d8', endColorstr = '#ffd0e9c6', GradientType = 0);

277

    background - repeat: repeat - x

278

}.panel - info > .panel - heading {

279

    background - image: -webkit - linear - gradient(top, #d9edf7 0, #c4e3f3 100 % );

280

    background - image: -o - linear - gradient(top, #d9edf7 0, #c4e3f3 100 % );

281

    background - image: -webkit - gradient(linear, left top, left bottom, from(#d9edf7), to(#c4e3f3));

282

    background - image: linear - gradient(to bottom, #d9edf7 0, #c4e3f3 100 % );

283

    filter: progid: DXImageTransform.Microsoft.gradient(startColorstr = '#ffd9edf7', endColorstr = '#ffc4e3f3', GradientType = 0);

284

    background - repeat: repeat - x

285

}.panel - warning > .panel - heading {

286

    background - image: -webkit - linear - gradient(top, #fcf8e3 0, #faf2cc 100 % );

287

    background - image: -o - linear - gradient(top, #fcf8e3 0, #faf2cc 100 % );

288

    background - image: -webkit - gradient(linear, left top, left bottom, from(#fcf8e3), to(#faf2cc));

289

    background - image: linear - gradient(to bottom, #fcf8e3 0, #faf2cc 100 % );

290

    filter: progid: DXImageTransform.Microsoft.gradient(startColorstr = '#fffcf8e3', endColorstr = '#fffaf2cc', GradientType = 0);

291

    background - repeat: repeat - x

292

}.panel - danger > .panel - heading {

293

    background - image: -webkit - linear - gradient(top, #f2dede 0, #ebcccc 100 % );

294

    background - image: -o - linear - gradient(top, #f2dede 0, #ebcccc 100 % );

295

    background - image: -webkit - gradient(linear, left top, left bottom, from(#f2dede), to(#ebcccc));

296

    background - image: linear - gradient(to bottom, #f2dede 0, #ebcccc 100 % );

297

    filter: progid: DXImageTransform.Microsoft.gradient(startColorstr = '#fff2dede', endColorstr = '#ffebcccc', GradientType = 0);

298

    background - repeat: repeat - x

299

}.well {

300

    background - image: -webkit - linear - gradient(top, #e8e8e8 0, #f5f5f5 100 % );

301

    background - image: -o - linear - gradient(top, #e8e8e8 0, #f5f5f5 100 % );

302

    background - image: -webkit - gradient(linear, left top, left bottom, from(#e8e8e8), to(#f5f5f5));

303

    background - image: linear - gradient(to bottom, #e8e8e8 0, #f5f5f5 100 % );

304

    filter: progid: DXImageTransform.Microsoft.gradient(startColorstr = '#ffe8e8e8', endColorstr = '#fff5f5f5', GradientType = 0);

305

    background - repeat: repeat - x;

306

    border - color: #dcdcdc; - webkit - box - shadow: inset 0 1 px 3 px rgba(0, 0, 0, .05), 0 1 px 0 rgba(255, 255, 255, .1);

307

    box - shadow: inset 0 1 px 3 px rgba(0, 0, 0, .05), 0 1 px 0 rgba(255, 255, 255, .1)

308

}

Flattr

Browser extensions and other uses:

    A bookmarklet (drag it to your bookmarks) by Ichiro Hiroshi to see all scripts used on the page,
    Chrome: jsbeautify-for-chrome by Tom Rix,
    Chrome: Pretty Beautiful JavaScript by Will McSweeney,
    Chrome: Quick source viewer by Tomi Mickelsson (github, blog),
    Chrome: Stackoverflow Code Beautify by Making Odd Edit Studios (github),
    Firefox: Javascript deminifier by Ben Murphy, to be used together with the firebug (github),
    Safari: Safari extension by Sandro Padin,
    Opera: Readable JavaScript (github) by Dither,
    Opera: Source extension by Deathamns,
    Sublime Text 2: JsFormat, a javascript formatting plugin for this nice editor by Davis Clark,
    vim: sourcebeautify.vim, a plugin by michalliu (requires node.js, V8, SpiderMonkey or cscript js engine),
    vim: vim-jsbeautify, a plugin by Maksim Ryzhikov (node.js or V8 required),
    Emacs: Web-beautify formatting package by Yasuyuki Oka,
    C#: ghost6991 ported the javascript formatter to C#,
    Go: ditashi has ported the javascript formatter to golang,
    Fiddler proxy: JavaScript Formatter addon,
    gEdit tips by Fabio Nagao,
    Akelpad extension by Infocatcher,
    Beautifier in Emacs write-up by Seth Mason,
    Cloud9, a lovely IDE running in a browser, working in the node/cloud, uses jsbeautifier (github),
    Shrinker, a non-free JavaScript packer for Mac. I haven't used it, so I have no idea if it's any good,
    REST Console, a request debugging tool for Chrome, beautifies JSON responses (github),
    mitmproxy, a nifty SSL-capable HTTP proxy, provides pretty javascript responses (github).
    wakanda, a neat IDE for web and mobile applications has a Beautifier extension (github).
    Burp Suite now has a beautfier extension, thanks to Soroush Dalili,
    Netbeans jsbeautify plugin by Drew Hamlett (github).
    brackets-beautify-extension for Adobe Brackets by Drew Hamlett (github),
    codecaddy.net, a collection of webdev-related tools, assembled by Darik Hall,
    editey.com, an interesting and free Google-Drive oriented editor uses this beautifier,
    a beautifier plugin for Grunt by Vishal Kadam,
    SynWrite editor has a JsFormat plugin (rar, readme),
    LIVEditor, a live-editing HTML/CSS/JS IDE (commercial, Windows-only) uses the library.
    Doing anything interesting? Write me to einar@jsbeautifier.org and I'll include your link.

Written by Einar Lielmanis, einar@jsbeautifier.org, maintained and evolved by Liam Newman.

We use the wonderful CodeMirror syntax highlighting editor, written by Marijn Haverbeke.

Made with a great help of Jason Diamond, Patrick Hof, Nochum Sossonko, Andreas Schneider,
Dave Vasilevsky, Vital Batmanov, Ron Baldwin, Gabriel Harrison, Chris J. Shull, Mathias Bynens,
Vittorio Gambaletta, Stefano Sanfilippo and Daniel Stockman.

Run the tests
